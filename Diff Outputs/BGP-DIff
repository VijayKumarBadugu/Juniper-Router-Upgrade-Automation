/*
$Id$
*/

version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns adv = "http://xml.juniper.net/adventure";
ns func extension = "http://exslt.org/functions";
ns test = "http://xml.juniper.net/test";
ns exsl extension = "http://exslt.org/common";
ns set = "http://exslt.org/sets";
ns redirect extension = "org.apache.xalan.xslt.extensions.Redirect";
ns xmlns="http://xml.juniper.net/junos/*/junos";


import "../import/junos.xsl";
match / {


	var $Pre_Maintainence	:= {
				<Restoral> {
				<Restoral-Bgp>	{
								
									<bgp-peer>{
											<peer-as>200;
											<peer-state>"ESTABLISHED";
											<description>"Vijay";
										}
									
									
								
							}
						}
				}
	var $Post_Maintainence	:= {
				<Restoral> {
				<Restoral-Bgp>	{
								
									<bgp-peer>{
											<peer-as>200;
											<peer-state>"ESTABLISHED";
											<description>"Vijay";
										}
									<bgp-peer>{
											<peer-as>300;
											<peer-state>"ESTABLISHED";
											<description>"Raesh";
										}
									
								
							}
						}
				}

	
	
	expr test:Diff_BGP_Summary($Pre_Maintainence,$Post_Maintainence);
}

<func:function name="test:Diff_BGP_Summary">
{
	param 	$Pre_Maintainence;
	param	$Post_Maintainence;
	
	expr jcs:output("\n Pre-Maintenance BGP sessions  : " _ count($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer[peer-state=="ESTABLISHED"]));
	expr jcs:output("\n Post-Maintenance BGP sessions : " _ count($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[peer-state=="ESTABLISHED"]));
	
	for-each($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer)
	{
		var $pre-peer-as=./peer-as;
		var $pre-peer-state=./peer-state;
		var $pre-description=./description;
		
		if($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as])
		{
			var $post-peer-as	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/peer-as;
			var $post-peer-state	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/peer-state;
			var $post-description	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/description;
			
			
			if(($pre-peer-state!=$post-peer-state)||($pre-description!=$post-description))
			{
expr jcs:output("\n Mismatch Found");
expr jcs:output("\n Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " Pre-Maintenance");
expr jcs:output("\n Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " Post-Maintenance");
	
			}
		}
		else
		{
expr jcs:output("\n Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " is missing in Post-Maintenance BGP sessions");
		}
	}

	for-each($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer)
	{
		var $post-peer-as=./peer-as;
		var $post-peer-state=./peer-state;
		var $post-description=./description;
		
		if($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as])
		{
			var $pre-peer-as	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/peer-as;
			var $pre-peer-state	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/peer-state;
			var $pre-description	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/description;
			
			
			if(($pre-peer-state!=$post-peer-state)||($pre-description!=$post-description))
			{
expr jcs:output("\n Mismatch Found");
expr jcs:output("\n Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " Pre-Maintenance");
expr jcs:output("\n Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " Post-Maintenance");
	
			}
		}
		else
		{
expr jcs:output("\n Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " is newly added in Post-Maintenance BGP sessions");
		}
	}
}
