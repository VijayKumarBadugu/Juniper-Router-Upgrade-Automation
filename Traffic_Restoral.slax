/*
$Id$
*/

version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns adv = "http://xml.juniper.net/adventure";
ns func extension = "http://exslt.org/functions";
ns test = "http://xml.juniper.net/test";
ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";



match / {


	var $connection = jcs:open();

	var $File_name		= "/var/home/full/" _ test:Check_if_File_Exits();

	
	
	var $Restoral_xml_file		= $File_name ;
	var $O_Bgp_Config		= document($Restoral_xml_file);

	expr jcs:output("===========> activate routing-instances");
	expr test:Continue_Prompt_Function();
	
/********************************************** activate routing-instances *********************************************************************/

	
	if($O_Bgp_Config/configuration/routing-instances)
	{
		var $routing_instance_activate =	{
					<configuration>{
            					<routing-instances active="active">;
						}
						}
	call jcs:load-configuration( $connection, $configuration =$routing_instance_activate);
		
	}


	expr jcs:output("===========> activate routing-options");
	expr test:Continue_Prompt_Function();

/********************************************** activate routing-options *********************************************************************/
	
	var $routing_options_activate =	{
					<configuration>{
            					<routing-options active="active">;
						}
						}
	call jcs:load-configuration( $connection, $configuration =$routing_options_activate);


	
	

	expr jcs:output("===========> activate chassis redundancy");
	expr test:Continue_Prompt_Function();

/********************************************** activate chassis redundancy ***********************************************************************/

	var $chassis_redundancy_activate =	 	{
						<configuration>{
							<chassis>	{
                				<redundancy active="active">;
									}
								}
							}
	call jcs:load-configuration( $connection, $configuration =$chassis_redundancy_activate);
	
	expr jcs:output("===========> activate protocols");
	expr test:Continue_Prompt_Function();

/********************************************** activate protocols ***********************************************************************/
	
	var $protocols_activate_configuration={
				<configuration> {
					<protocols active="active">;
		    				}
					  }

	call jcs:load-configuration( $connection, $configuration =$protocols_activate_configuration);
	
	expr jcs:output("===========> activate bgp");
	expr test:Continue_Prompt_Function();

/********************************************** activate bgp *****************************************************************************/

	var $bgp_activate_configuration={
				<configuration> {
					<protocols >{
							<bgp active="active">;
							}
		    				}
					  }
	

		
	call jcs:load-configuration( $connection, $configuration =$bgp_activate_configuration);

	expr jcs:output("===========> delete protocols isis overload");
	expr test:Continue_Prompt_Function();

/********************************************** delete protocols isis overload ***********************************************************/

		
	var $isis_delete_configuration={
		<configuration> {
			<protocols> {
				<isis delete="delete"> {
					<overload delete="delete">;
					}
				    }
				}
		    }
	call jcs:load-configuration( $connection, $configuration =$isis_delete_configuration);

	expr jcs:output("===========> set protocols isis overload timeout 600");
	expr test:Continue_Prompt_Function();

/********************************************** set protocols isis overload timeout 600  *************************************************/

	var $isis_time_reset_configuration={
		<configuration> {
			<protocols> {
				<isis> {
					<overload>{
							<timeout> 600;
						}
					}
				    }
				}
		    }

	call jcs:load-configuration( $connection, $configuration =$isis_time_reset_configuration);


	expr jcs:output("===========> activate group <GROUP_NAME>");
	expr test:Continue_Prompt_Function();

/********************************************** activate group <GROUP_NAME>  *************************************************/

	var $Restore_Bgp_Config=<get-configuration>;
	var $O_Restore_Bgp_Config 	= jcs:invoke($Restore_Bgp_Config);
	

for-each($O_Restore_Bgp_Config/protocols/bgp/group[not(starts-with(peer-as,"64")||starts-with(peer-as,"65")||starts-with(peer-as,"61")||starts-with(peer-as,"62"))])
	{
		
		var $Temp_bgp_grp = name;
			
		if($O_Bgp_Config/configuration/protocols/bgp/group[(not(@inactive))&&(name==$Temp_bgp_grp)])
		{	
			/*if(not($O_Bgp_Config/configuration/protocols/bgp/group[(@inactive)]))
			{*/
				expr jcs:output("\n Now activating bgp group " _ name _ " with peer-as " _ peer-as);
				expr test:Continue_Prompt_Function();
				var $bgp_group_activate_configuration={
						<configuration> {
							<protocols>{
								<bgp>	{
								<group active="active">
											{
							 				<name> name;
											}
									}
				 		   		    }
		    						}
					  		}
			call jcs:load-configuration( $connection, $configuration = $bgp_group_activate_configuration);
			/*}*/
	
		}




	}



	
	var $close-results = jcs:close($connection);






}



<func:function name="test:Check_if_File_Exits">
{
	var $File_Name	=	test:File_Name_Creater() _ ".xml";

	if(test:File_Finder($File_Name)=="no")
	{
		expr jcs:output("\n You don't have the restoral in local disk");
		expr jcs:output("\n You need to download the xml file from FTP server");
		var $Restoral_File	=test:Restoral_File_Finder();
		<func:result select="$Restoral_File">;
	
	}
	else
	{
		expr jcs:output("\n You have the required file in the local disk");
		
		<func:result select="$File_Name">;
	}
}

<func:function name="test:File_Finder">
{
	param $File_name;
	var $Code_path_file		= "/var/home/full/";
	expr jcs:output("\n Searching for code file if exists on router at " _ $Code_path_file);
	var $File_Search		=  <file-list>{			
						<path> $Code_path_file;
					}
	var $O_File_Search		= jcs:invoke($File_Search);
	

	if($O_File_Search/directory/file-information[file-name==$File_name])
	{
		var $Result="yes";
		<func:result select="$Result">;
	}
	else
	{
		var $Result="no";
		<func:result select="$Result">;
	}
}



<func:function name="test:File_Name_Creater">
{

	var $regex 		= "([[:digit:]]*)-([[:digit:]]*)-([[:digit:]]*) ([0-9]*):([0-9]*):([0-9]*).*";
	var $result 		= jcs:regex($regex, $localtime-iso );
	var $Router_Name 	= <command> "show version";
	var $O_Router_Name 	= jcs:invoke($Router_Name);
	var $Actual_Router_Name	= $O_Router_Name/host-name;
	var $File_name		= $Actual_Router_Name _ "." _ $result[3] _ $result[4] _ substring($result[2],3,4);
	<func:result select="$File_name">;
}



<func:function name="test:Restoral_File_Finder">
{
	var $Option	= jcs:get-input("\n Is the file present in local disk ? ");
	if($Option=="yes")
	{
		var $Restoral_xml_file		= jcs:get-input("\n Please enter the xml file name with path of the xml configuration file "); 
		<func:result select="$Restoral_xml_file">;
	}
	else
	{
		if($Option=="no")
		{
			var $Restoral_xml_file		= test:XML_Path_Finder();
			<func:result select="$Restoral_xml_file">;
		}
		else
		{
			var $Restoral_xml_file		= test:Restoral_File_Finder();
			<func:result select="$Restoral_xml_file">;	
		}
	}

}


<func:function name="test:XML_Path_Finder">
{
	
		var $Source_File		=jcs:get-input("\n Please enter the xml file name ");/*"jinstall64-13.3R3-S8.2-domestic-signed.tgz";*/
		expr jcs:output("\n Downloading the xml file " _ $Source_File);
		var $Destination_File	="/var/home/full/" _ $Source_File;	
		var $Success_Destination_File = test:FTP_File_Transfer_Software($Source_File,$Destination_File);	
		<func:result select="$Success_Destination_File">;
	

}

<func:function name="test:Continue_Prompt_Function">
{
	expr jcs:output("\n Please Choose \"yes\" [to Continue],\"quit\" [to Exit],\"show\" [show command]");
	
	var $var = jcs:get-input(" Enter: ");
	if($var=="quit")     
	{ 
	  		<xsl:message terminate="yes"> "Aborting the script";
	} 
	else
	{
		if($var=="show")
		{
			expr test:View_System_Running();
			expr test:Continue_Prompt_Function();
		}
		else
		{
			if($var!="yes")
			{
		
				<xsl:message> "Please choose between 'yes' or 'no'.\n";
				expr test:Continue_Prompt_Function();
				
			
			}
		}
	}
	
}



<func:function name="test:FTP_File_Transfer_Software">
{
	param $Source_File;
	param $Destination_File;
	var $FTP_IP 		= jcs:get-input("\n Please enter the IP address of the FTP server " );
	var $FTP_Hostname	= jcs:get-input("\n Please enter user name of the FTP server " );
	var $Password		= jcs:get-secret("\n Please enter the password ");
	
	var $FTP_Config_path	= test:FTP_Config_Path_Finder();
	
	var $Temp		="ftp://" _ $FTP_Hostname _ ":" _ $Password _ "@" _ $FTP_IP _ $FTP_Config_path _  $Source_File;

	var $file-copy-xml-rpc = <file-copy> {
     			 	<source> $Temp;
      				<destination> $Destination_File;
						
    						}
	expr jcs:output("\n Source file :" _ $Temp);
	expr jcs:output("\n Destination file : " _ $Destination_File);
	var $results-xml = jcs:invoke($file-copy-xml-rpc);
	if ($results-xml//self::xnm:error)
	{
		expr jcs:output($results-xml);
		expr jcs:output("\n File transer failed ! Please try again ");
		var $Success_Destination_File = test:XML_Path_Finder();
		<func:result select="$Success_Destination_File">;
	}
	else
	{
		expr jcs:output("\n File transfered successfully ! ");
		<func:result select="$Destination_File">;
	}
	
}




<func:function name="test:FTP_Config_Path_Finder">
{
	var $FTP_Config_option	= jcs:get-input("\n Is the file at /prod/img directory at TFTP server ");
	if($FTP_Config_option=="yes")
	{
		var $FTP_Config_path= "/prod/img/";
		<func:result select="$FTP_Config_path">;
	}
	else
	{
		if($FTP_Config_option=="no")
		{
			var $FTP_Config_path=jcs:get-input("\n please give the path from root ");
			<func:result select="$FTP_Config_path">;
		}
		else
		{
			var $FTP_Config_path	= test:FTP_Config_Path_Finder();
			<func:result select="$FTP_Config_path">;
		}
	}
}



<func:function name="test:View_System_Running">
{
	
		var $Command = jcs:get-input("\n Please enter the command ");
		var $Show_Command = <command> $Command;
		var $O_Show_Command =  jcs:invoke($Show_Command);
		expr jcs:output($O_Show_Command);
		
		
}

