/*
$Id$
*/

version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns adv = "http://xml.juniper.net/adventure";
ns func extension = "http://exslt.org/functions";
ns automation = "http://xml.juniper.net/automation";
ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";

/*
 * Author        : Vijay Kumar Badugu
 * Version       : 1.0
 * Last Modified : August 6, 2015
 * Description   : The purpose of this op script is to restore the router configuration to that of pre maintenance configuration.
 *		   
 *
 *==========================================================================================================
 * To set this script up on your JUNOS device copy this script to the following folder:
 * /var/run/scripts/op
 *			
 * Then configure JUNOS with the following :
 * set system scripts op file Traffic_Restoral.slax
 *
 */


match / {


	var $connection = jcs:open();
/********************************************** show software of the system ***************************************************************/
	var $Routing_Engine_Checker	= <command> " show chassis routing-engine ";
	var $O_Routing_Engine_Checker	= jcs:invoke($Routing_Engine_Checker);
	
	
	/* Check whether both routing engines have same JUNOS code*/
	expr automation:software_version();
	
	
	
/*********************************************************routing engine switch*********************************************************/

	
	expr automation:Continue_Prompt_Function("\n Do you want to check whether re0 is the master routing engine switch ? " );

	
	/* Check whether "re0" is configured as master. If "re0" is not configured as a master do a routing engine switch by running
	   following command "request chassis routing-engine master switch"*/
	if($O_Routing_Engine_Checker/route-engine[(slot=="0")&&(mastership-state=="master")])
	{
		expr jcs:output("\n Re0 is Configured as Master.");	
	}
	else
	{
		expr jcs:output("\n Re0 is not configured as Master! ");
		
		expr automation:Continue_Prompt_Function(" Do you want to run the command \" request chassis routing-engine master switch \" ?");
		
		var $Switch 	= <command> "request chassis routing-engine master switch";
		var $O_Switch 	= jcs:invoke($Switch);
		var $O_Recheck_Routing_Engine_Checker	= jcs:invoke($Routing_Engine_Checker);
		
		/* After runnign the command "request chassis routing-engine master switch" even still if re0 is not 
	 	   configured as master then give an error prompt saying "re0" is still not configured as master*/
		if($O_Recheck_Routing_Engine_Checker/route-engine[(slot=="0")&&(mastership-state=="master")])
		{
			expr jcs:output("\n Re0 is Configured as Master ");	
		}
		else
		{
			
			expr automation:Quit_Prompt_Function("\n Re0 is not configured as Master! ");
			
		}
		
		
		
		
	}


/********************************************** search for xml restoral file ***************************************************************/

	/* $File_name is the file name of the xml file that contains the pre maintenace state of the router*/
	var $File_name		= "/var/home/full/" _ automation:Check_if_File_Exits();

	
	
	var $Restoral_xml_file		= $File_name ;
	var $O_Bgp_Config		= document($Restoral_xml_file);/* Open the pre maintenace state xml file and assign the node set to $O_Bgp_Config variable*/
/********************************************** search for xml restoral file ***************************************************************/
	expr jcs:output("\n Now showing the Pre Maintenance and Pre Maintenance hardware status  ");

	expr automation:Hardware-Status($Restoral_xml_file);	/* Check the hardware before adding the traffic*/

	expr automation:Continue_Prompt_Function("\n Do you want to proceed further to restore the traffic ?");

	

	
	


	
	expr automation:Continue_Prompt_Function("\n Do you want to restore routing-options to pre maintenace state ?");

/********************************************** activate routing-options if it has been deactivated during by Upgrade.slax script********************************/
	
	/* Check if routing options are configured by checking pre maintanence state xml file  */
	if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/routing-options)
	{
		/* activate if routing options are active pre maintenance*/
		expr automation:Continue_Prompt_Function(" Routing options are active pre maintenance .Do you want to activate routing options ");
		var $routing_options_activate =	{
					<configuration>{
            					<routing-options active="active">;
						}
						}
		call jcs:load-configuration( $connection, $configuration =$routing_options_activate);
	}
	else
	{
		/* Do nothing if routing options are not configured  pre maintenance*/
		expr jcs:output(" Routing options state are not configured pre maintenance.So no changes to be made to routing options ");
	}


	
	

	
	expr automation:Continue_Prompt_Function("\n Do you want to activate chassis redundancy ?");

/********************************************** activate chassis redundancy ***********************************************************************/

	var $chassis_redundancy_activate =	 	{
						<configuration>{
							<chassis>	{
                				<redundancy active="active">;
									}
								}
							}
	call jcs:load-configuration( $connection, $configuration =$chassis_redundancy_activate);
	
	
	expr automation:Continue_Prompt_Function("\n Do you want to activate protocols ?");

/********************************************** activate protocols ***********************************************************************/
	
	var $protocols_activate_configuration={
				<configuration> {
					<protocols active="active">;
		    				}
					  }

	call jcs:load-configuration( $connection, $configuration =$protocols_activate_configuration);
	
/********************************************** Wait for krt Queue ******************************************************/
	expr automation:Show_KRT_Queue();
/********************************************** Wait for krt Queue ******************************************************/
	
	
	expr automation:Stats-Protocols($Restoral_xml_file);	
	expr automation:Continue_Prompt_Function("\n Do you want to proceed further to restore the traffic ?");
	
	expr automation:Continue_Prompt_Function("\n Do you want to activate bgp ?");

/********************************************** activate bgp *****************************************************************************/

	var $bgp_activate_configuration={
				<configuration> {
					<protocols >{
							<bgp active="active">;
							}
		    				}
					  }
	

		
	call jcs:load-configuration( $connection, $configuration =$bgp_activate_configuration);
/********************************************** Wait for krt Queue ******************************************************/	
	expr automation:Show_KRT_Queue();
/********************************************** Wait for krt Queue ******************************************************/

	
	expr automation:Continue_Prompt_Function("\n Do you want to restore ISIS overlaod to  pre maintenance state?");

/********************************************** restore  pre maintenance state for isis overload ***********************************************************/
 	
	/* Check if timeout is configured pre maintenance.If time out is present .configure isis overload timeout with value 600*/
	if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/protocols/isis/timeout)
	{	
		expr jcs:output("\n ISIS is not in overload state Pre Maintenance ");
		
		expr automation:Continue_Prompt_Function(" Do you want to  delete protocols isis overload ?");
		var $isis_delete_configuration={
			<configuration> {
				<protocols> {
					<isis delete="delete"> {
						<overload delete="delete">;
						}
					    }
					}
		   	 }
		call jcs:load-configuration( $connection, $configuration =$isis_delete_configuration);

		
		expr automation:Continue_Prompt_Function("\n Do you want to  set protocols isis overload timeout 600 ?");

/********************************************** set protocols isis overload timeout 600  *************************************************/

		var $isis_time_reset_configuration={
			<configuration> {
				<protocols> {
					<isis> {
						<overload>{
								<timeout> 600;
							}
						}
					    }
					}
		    	}

		call jcs:load-configuration( $connection, $configuration =$isis_time_reset_configuration);
	}
	else
	{
		/* check if isis is overload in pre maintenance*/
		if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/protocols/isis/overload)
		{
			/*restore isis overload to  pre maintenance state by setting router in overload*/		
		expr automation:Continue_Prompt_Function("\n ISIS is in overload state Pre Maintenance. Do you want to set isis overload to Pre Maintenance state ? ");
			var $isis_configuration={
					<configuration> {
						<protocols> {
							<isis> {
							<overload>;
								}
				    			    }
							}
		    				}
			call jcs:load-configuration( $connection, $configuration =$isis_configuration);
		}
		else
		{
			/* if isis overload is not configured deleted overload in isis*/
			expr jcs:output("\n ISIS is not in overload state Pre Maintenance ");
			
			expr automation:Continue_Prompt_Function("\n Do you want to  delete protocols isis overload ?");	
			var $isis_delete_configuration={
				<configuration> {
					<protocols> {
						<isis> {
							<overload delete="delete">;
							}
					    	}
					}
		   	 	}
			call jcs:load-configuration( $connection, $configuration =$isis_delete_configuration);
		}
	}

	expr automation:Continue_Prompt_Function("\n Do you want to restore Pre Maintenance state for routing-instances ?");
	
/************************************** activate routing-instances if they are active  pre maintenance****************************************************************/
	
	/* Check if routing-instances are configured  pre maintenance*/
	if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/routing-instances)
	{
		/* If routing-instances are configured  pre maintenance.activate them*/
		expr automation:Continue_Prompt_Function("\n Routing-instances is activated state Pre Maintenance.\n\n Do you want to activate routing-instances ?");
		var $routing_instance_activate =	{
					<configuration>{
            					<routing-instances active="active">;
						}
						}
	call jcs:load-configuration( $connection, $configuration =$routing_instance_activate);
		
	}
	else
	{
		expr jcs:output("\n Routing-instances is not activated Pre Maintenance.");
	}

	
	expr automation:Continue_Prompt_Function("\n Do you want to activate External BGP ? ");

/********************************************** activate Externel BGP peers that were deactivated by Upgrade.slax script **************************************/

	var $Restore_Bgp_Config=<get-configuration>;
	var $O_Restore_Bgp_Config 	= jcs:invoke($Restore_Bgp_Config);
	
/* search external bgp peers in present router configuration whose peer doesn't start with "64","65","61","62"*/
for-each($O_Restore_Bgp_Config/protocols/bgp/group[(type=="external")&&(not(starts-with(peer-as,"64")||starts-with(peer-as,"65")||starts-with(peer-as,"61")||starts-with(peer-as,"62")))])
	{
		
		var $Temp_bgp_grp = name;
			
		/* Check if this bgp peer is active pre maintenance .Activate the bgp peer if it was active pre maintenance*/
		if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/protocols/bgp/group[(not(@inactive))&&(name==$Temp_bgp_grp)])
		{	
				/*Activating the bgp peer that was active pre maintenance*/
				expr jcs:output("\n Now activating bgp group " _ name _ " with peer-as " _ peer-as);
					var $bgp_group_activate_configuration={
						<configuration> {
							<protocols>{
								<bgp>	{
								<group active="active">
											{
							 				<name> name;
											}
									}
				 		   		    }
		    						}
					  		}
			call jcs:load-configuration( $connection, $configuration = $bgp_group_activate_configuration);
			
	
		}




	}


	/* Display the difference of pre maintanence and post maintanence state of the router*/
	expr automation:Diff-Statistics($Restoral_xml_file);
	
	var $close-results = jcs:close($connection);






}

/*
Stats-Protocols functions gives the difference of following command outputs pre and post maintainence
	show isis Adjacency
	show ldp neighbor
	show ldp session
	how mpls interfaces

	
	
*/


<func:function name="automation:Stats-Protocols">
{

	param $Restoral_xml_file;
	var $Pre_Maintainence=document($Restoral_xml_file);
	var $Post_Maintainence=automation:Tree-construct();
	expr jcs:output("\n 		show isis Adjacency");
	expr jcs:output("*****************************************************************");
	/*Compare pre maintainence node set ,post maintainence node set of "show isis Adjacency" output*/
	expr automation:Diff_Isis_Adjacency($Pre_Maintainence,$Post_Maintainence);
	
	expr jcs:output("\n 		show ldp neighbor");
	expr jcs:output("*****************************************************************");
	/*Compare pre maintainence node set ,post maintainence node set of "show ldp neighbor" output*/
	expr automation:Diff_LDP_Neighbor($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show ldp session");
	expr jcs:output("*****************************************************************");
	/*Compare pre maintainence node set ,post maintainence node set of "show ldp session" output*/
	expr automation:Diff_LDP_Sessions($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show mpls interfaces");
	expr jcs:output("*****************************************************************");
	/*Compare pre maintainence node set ,post maintainence node set of "mpls interfaces" output*/
	expr automation:Diff_mpls_interfaces($Pre_Maintainence,$Post_Maintainence);
}

/*
Hardware-Status functions gives the difference of following command outputs pre and post maintainence
	show chassis alarms
	show chassis fpc pic-status
	show chassis environment

and checks whether master routing engine and back up routing engines are in "OK" status
	
	
*/

<func:function name="automation:Hardware-Status">
{

	param $Restoral_xml_file;
	var $Pre_Maintainence=document($Restoral_xml_file);		/* Get the pre maintainence node set*/
	var $Post_Maintainence=automation:Tree-construct();		/* Get the post maintainence node set*/
	expr jcs:output("\n 		show chassis alarms");
	expr jcs:output("*****************************************************************");
	/*Compare pre maintainence node set ,post maintainence node set of "show chassis alarms" output*/
	expr automation:Diff_chassis_alarms($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show chassis fpc pic-status");
	expr jcs:output("*****************************************************************");
	/*Compare pre maintainence node set ,post maintainence node set of "show chassis fpc pic-status" output*/
	expr automation:Diff_chassis_fpc($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show chassis environment");
	expr jcs:output("*****************************************************************");

	/*Compare pre maintainence node set ,post maintainence node set of "show chassis environment" output*/
	expr automation:Diff_Chassis_Environment($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show chassis routing-engine");
	expr jcs:output("*****************************************************************");
	
	var $Routing_Engine_Checker	= <command> " show chassis routing-engine ";
	var $O_Routing_Engine_Checker	= jcs:invoke($Routing_Engine_Checker);
	
	/* Check if master routing engine status is "OK"*/
	
	if($O_Routing_Engine_Checker/route-engine[(mastership-state=="master")&&(status=="OK")])
	{
		expr jcs:output("\n Master routing engine is Online");
	}
	else
	{
		expr automation:Quit_Prompt_Function("\n Problem in Routing Engine.Please debug before continuing");
		
	}
	/* Check if backup routing engine status is "OK"*/
	if($O_Routing_Engine_Checker/route-engine[(mastership-state=="backup")&&(status=="OK")])
	{
		expr jcs:output("\n Backup routing engine is Online");
	}
	else
	{
		expr automation:Quit_Prompt_Function("\n Problem in Routing Engine.Please debug before continuing");
	}
	
}
/*
Diff-Statistics function gives the difference of following command outputs pre and post maintainence
			a)		show chassis fpc pic-status
			b)		show isis Adjacency
			c)		show bgp summary
			d)		show ldp neighbor
			e)		show ldp session
			f)		show bfd session
			g)		show interface description
			i)		show mpls interfaces
			j)		show rsvp interfaces
			k)		show chassis alarms
			l)		show mpls terse
			m)		show route summary
			n)		show chassis environment

	
	
*/


<func:function name="automation:Diff-Statistics">
{
	param $Restoral_xml_file;
	var $Pre_Maintainence=document($Restoral_xml_file);
	var $Post_Maintainence=automation:Tree-construct();
	expr jcs:output("\n		Statistics");
	expr jcs:output("*****************************************************************");
	expr jcs:output("\n 		show chassis fpc pic-status");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_chassis_fpc($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show isis Adjacency");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_Isis_Adjacency($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show bgp summary");
	expr automation:Diff_BGP_Summary($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show ldp neighbor");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_LDP_Neighbor($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show ldp session");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_LDP_Sessions($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show bfd session");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_BFD_Session($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show interface description");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_int_desc($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show mpls interfaces");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_mpls_interfaces($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show rsvp interfaces");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_rsvp_interfaces($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show chassis alarms");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_chassis_alarms($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show mpls terse");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_mpls_terse($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show route summary");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_route_summary($Pre_Maintainence,$Post_Maintainence);
	expr jcs:output("\n 		show chassis environment");
	expr jcs:output("*****************************************************************");
	expr automation:Diff_Chassis_Environment($Pre_Maintainence,$Post_Maintainence);
	
}


/* Tree-construct constructs a node set which contains output of following commands and configuration of the router
			a)		show chassis fpc pic-status
			b)		show isis Adjacency
			c)		show bgp summary
			d)		show ldp neighbor
			e)		show ldp session
			f)		show bfd session
			g)		show interface description
			i)		show mpls interfaces
			j)		show rsvp interfaces
			k)		show chassis alarms
			l)		show mpls terse
			m)		show route summary
			n)		show chassis environment
*/

<func:function name="automation:Tree-construct">
{
	/* Get the outputs of the above commands and configuration*/
	var $xml_config			= <get-configuration format="xml">;
	var $o_xml_config		= jcs:invoke($xml_config);
	var $fpc-pic-status		= <command> "show chassis fpc pic-status";
	var $o_fpc-pic-status		= jcs:invoke($fpc-pic-status);
	var $get-isis-adjacency 	= <command> "show isis adjacency";
	var $o-get-isis-adjacency 	= jcs:invoke($get-isis-adjacency);
	var $get-bgp			= <command> "show bgp summary";
	var $o_get-bgp			= jcs:invoke($get-bgp);

	var $ldp_neighbor		= <command> "show ldp neighbor";
	var $o_ldp_neighbor		= jcs:invoke($ldp_neighbor);

	var $ldp_session		= <command> "show ldp session";
	var $o_ldp_session		= jcs:invoke($ldp_session);

	var $show_bfd			= <command> "show bfd session";
	var $o_show_bfd			= jcs:invoke($show_bfd);

	var $show_route			= <command> "show route summary";
	var $o_show_route		= jcs:invoke($show_route);
	var $show_chassis		= <command> "show chassis summary";
	var $o_show_chassis		= jcs:invoke($show_chassis);
	
	var $show_interface_des		= <command> "show interface descriptions";
	var $o_show_interface_des	= jcs:invoke($show_interface_des);

	var $show_mpls_lsp_terse	= <command> "show mpls lsp terse";
	var $o_show_mpls_lsp_terse	= jcs:invoke($show_mpls_lsp_terse);

	var $show_mpls_int		= <command> "show mpls interface";
	var $o_show_mpls_int		= jcs:invoke($show_mpls_int);

	var $show_rsvp_int		= <command> "show rsvp interface";
	var $o_show_rsvp_int		= jcs:invoke($show_rsvp_int);

	var $show_chassis_alarms	= <command> "show chassis alarms";
	var $o_show_chassis_alarms	= jcs:invoke($show_chassis_alarms);

	var $show_chassis_environment	= <command> "show chassis environment";
	var $o_show_chassis_environment	= jcs:invoke($show_chassis_environment);


var $content := {
			<Restoral> {
				<Restoral-Conf>{
					copy-of $o_xml_config; 		/*router configuration is added to node-set here*/
					
					}
				<Restoral-Chassis-Environment>{		/*output of  "show chassis environment" is added to node-set here*/
									for-each($o_show_chassis_environment/environment-item)
									{
										 <environment-item>
											{
												<name>name;
            											<class>class;
            											<status>status;
											}

									}
								}
				<Restoral-route-summary>{

									/* output of  "show route summary" is added to node-set here*/
							for-each($o_show_route/route-table)
							{
								<route-table>
								{
            								<table-name>table-name;
            								<destination-count>destination-count;
            								<total-route-count>total-route-count;
								}

							}
						
							}
				<Restoral-mpls-terse>{
									/*output of  "show mps lsp terse" is added to node-set here*/
							for-each($o_show_mpls_lsp_terse/rsvp-session-data)
							{
								<rsvp-session-data>
									{
            									<session-type>session-type;
            									<count>count;
           	 								<display-count>display-count;
            									<up-count>up-count;
            									<down-count>down-count;
									}
							
							}




						    }
				<Restoral-Chassis-alarms>{		/*  output of  "show chassis alarms" is added to node-set here*/
								for-each($o_show_chassis_alarms/alarm-summary)
								{
									 <alarm-summary>{
            									<active-alarm-count>active-alarm-count;
											}
								}
								
								for-each($o_show_chassis_alarms/alarm-detail)
								{
									<alarm-detail>{
            
            									<alarm-class>alarm-class;
            									<alarm-description>alarm-description;
            									<alarm-short-description>alarm-short-description;
            									<alarm-type>alarm-type;
											}

								}




								
							}
							
				
				<Restoral-rsvp-interface>	{	/*  output of  "show rsvp interfaces" is added to node-set here*/
									for-each($o_show_rsvp_int/rsvp-interface)
									{
										<rsvp-interface>
											{
            											<interface-name>interface-name;
            											<index>index;
            											<rsvp-status>rsvp-status;
										}
									}
								}

				<Restoral-mpls-interface>	{	/*  output of "show mpls interfaces" is added to node-set here*/
									for-each($o_show_mpls_int/mpls-interface)
									{
										<mpls-interface>{
            										<interface-name>interface-name;
            										<mpls-interface-state>mpls-interface-state;
												}
									}
								}
				<Restoral-int-desc>	{
									/*  output of "show interface descriptions" is added to node-set here*/
								for-each($o_show_interface_des/physical-interface)
								{
									<physical-interface>{
            									<name>name;
            									<admin-status>admin-status;            											<oper-status>oper-status;
            									<description>description;
											}
								}
									
							}

				<Restoral-bfd>	{			/*  output of "show bfd session" is added to node-set here*/
							for-each($o_show_bfd/bfd-session)
							{
							<bfd-session>{
            							<session-neighbor>session-neighbor;
            							<session-state>session-state;
            							<session-interface>session-interface;
            							<session-detection-time>session-detection-time;
            							<session-transmission-interval>session-transmission-interval;
            							<session-adaptive-multiplier>session-adaptive-multiplier;
					
								}
							}
						}
				
				<Restoral-ldp-session>	{		/*  output of "show ldp session" is added to node-set here*/
								for-each($o_ldp_session/ldp-session)
								{
									<ldp-session>{
            									<ldp-neighbor-address>ldp-neighbor-address;
            									<ldp-session-state>ldp-session-state;
            									<ldp-connection-state>ldp-connection-state;
            									<ldp-remaining-time>ldp-remaining-time;
            									<ldp-session-adv-mode>ldp-session-adv-mode;
							
										}
								}
									
							}

				<Restoral-ldp-neighbor>	{		/*  output of "show ldp neighbor" is added to node-set here*/
								for-each($o_ldp_neighbor/ldp-neighbor)
								{
									 <ldp-neighbor>{
            									<ldp-neighbor-address>ldp-neighbor-address;
            									<interface-name>interface-name;
            									<ldp-label-space-id>ldp-label-space-id;
            									<ldp-remaining-time>ldp-remaining-time;
											}
								}
									
							}

				<Restoral-Bgp>	{			/*  output of "show bgp summary" is added to node-set here*/
								for-each($o_get-bgp/bgp-peer)
								{
									<bgp-peer>{
											<peer-as>peer-as;
											<peer-state>peer-state;
											<description>description;
										}
								}
									
									
								
						}
				<Restoral-Isis>	{			/*  output of "show isis adjacency" is added to node-set here*/
							for-each($o-get-isis-adjacency/isis-adjacency)
							{
							<isis-adjacency>{
            							<interface-name>interface-name;
           							<system-name>system-name;
            							<level>level;
            							<adjacency-state>adjacency-state;
            							<holdtime>holdtime;
									}
							}
						}
				
				

				<Restoral-fpc-pic>	{		/*  output of "show fpc pic status" is added to node-set here*/
								 	for-each($o_fpc-pic-status/fpc)
									{
										<fpc>{
											var $slot=slot;
											<slot>slot;
            										<state>state;
            										<description>description;
												for-each($o_fpc-pic-status/fpc[$slot==slot]/pic)
												{
													<pic>{
                											<pic-slot>pic-slot;
                											<pic-state>pic-state;
                											<pic-type>pic-type;
														}

												}
										     }
									}
								}
						}
			}

	<func:result select="$content">;
			
}

/*
Diff_Chassis_Environment function gives the differences between pre maintainence and post maintainence output of "show chassis environment"
*/

<func:function name="automation:Diff_Chassis_Environment">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	
	/* Go through each node of environment-item  of $Pre_Maintainence/Restoral/Restoral-Chassis-Environment */
	for-each($Pre_Maintainence/Restoral/Restoral-Chassis-Environment/environment-item)
	{
		var $pre-name	=	name;
		var $pre-class	=	class;
		var $pre-status	=	status;
		/* Check if the present environment-item element is present in post maintainence*/
		if($Post_Maintainence/Restoral/Restoral-Chassis-Environment/environment-item[$pre-name==name])	
		{
			var $post-name		=	$Post_Maintainence/Restoral/Restoral-Chassis-Environment/environment-item[$pre-name==name]/name;
			var $post-class		=	$Post_Maintainence/Restoral/Restoral-Chassis-Environment/environment-item[$pre-name==name]/class;
			var $post-status	=	$Post_Maintainence/Restoral/Restoral-Chassis-Environment/environment-item[$pre-name==name]/status;
			/* Check whether post maintainence status and pre maintainence status are equal*/
			if($post-status!=$pre-status)
			{
				expr jcs:output(" The status of " _ $pre-name _ " changed from " _ $pre-status _ " to " _ $post-status);
			}
			
		}
		else
		{
			/* display the environment-item that is missing post Maintainence */
			expr jcs:output("\n " _ $pre-name _ " with status " _ $pre-status _ " of class " _ $pre-class _ " is  missing post Maintainence"); 
		}	
	}
	
	/*Go through each node of environment-item of $Post_Maintainence/Restoral/Restoral-Chassis-Environment*/
	for-each($Post_Maintainence/Restoral/Restoral-Chassis-Environment/environment-item)
	{
		var $post-name		=	name;
		var $post-class		=	class;
		var $post-status	=	status;	
		/* check if the present environment-item element is present in  pre Maintainence node set*/
		if(not($Pre_Maintainence/Restoral/Restoral-Chassis-Environment/environment-item[$post-name==name]))
		{
			expr jcs:output("\n " _ $post-name _ " with status " _ $post-status _ " of class " _ $post-class _ " is newly added post Maintainence"); 
		}
	}
}


/*
Diff_rsvp_interfaces function gives the differences between pre maintainence and post maintainence output of "show rsvp interfaces"
*/


<func:function name="automation:Diff_rsvp_interfaces">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance rsvp interfaces  : " _ count($Pre_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface));
	expr jcs:output(" Post-Maintenance rsvp interfaces : " _ count($Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface));
	
	
	/*Go through each node of rsvp-interface element in  $Pre_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface */	
	for-each($Pre_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface)
	{
	
		var $pre-interface-name	= interface-name;
		var $pre-index		= index;
		var $pre-rsvp-status	= rsvp-status;
		/* check if the present rsvp interface element is present in post Maintainence node set*/
		if($Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface[$pre-interface-name==interface-name])
		{
			
	var $post-interface-name	= $Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface[$pre-interface-name==interface-name]/interface-name;
	var $post-index		= $Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface[$pre-interface-name==interface-name]/index;
	var $post-rsvp-status	= $Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface[$pre-interface-name==interface-name]/rsvp-status;
			/*Check if the status changed*/
			if($pre-rsvp-status!=$post-rsvp-status)
			{
expr jcs:output(" The status of Rsvp interface " _ $post-interface-name _ " changed from " _ $pre-rsvp-status _ " to " _ $post-rsvp-status _ " post Maintainence");
			}
		
		}
		else
		{
			expr jcs:output(" Rsvp interface " _ $pre-interface-name _ " with status " _ $pre-rsvp-status _ " is not present Post-Maintainence");
		}
	
	}
	
	/*Go through each node of rsvp-interface element in $Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface */
	for-each($Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface)
	{
		var $post-interface-name	= interface-name;
		var $post-index		= index;
		var $post-rsvp-status	= rsvp-status;
		/* check if the present rsvp interface element is present in pre Maintainence node set*/
		if(not($Pre_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface[$post-interface-name==interface-name]))
		{
	expr jcs:output(" Rsvp interface " _ $post-interface-name _ " with status " _ $post-rsvp-status _ " is newly added Post-Maintainence");
		}
		
		
	}

			
	
}


/*
Diff_BFD_Session function gives the differences between pre maintainence and post maintainence output of "show bfd session"
*/



<func:function name="automation:Diff_BFD_Session">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance BFD Sessions  : " _ count($Pre_Maintainence/Restoral/Restoral-bfd/bfd-session));
	expr jcs:output(" Post-Maintenance BFD Sessions : " _ count($Post_Maintainence/Restoral/Restoral-bfd/bfd-session));
	
	/*Go through each node of bfd-session element in $Pre_Maintainence/Restoral/Restoral-bfd/bfd-session */	
	for-each($Pre_Maintainence/Restoral/Restoral-bfd/bfd-session)
	{
		var $pre-session-state		= session-state;
		var $pre-session-interface	= session-interface;
		/* check if the present bfd-session element is present in post Maintainence node set*/
		if($Post_Maintainence/Restoral/Restoral-bfd/bfd-session[$pre-session-interface==session-interface])
		{
		
	
		var $post-session-state		= $Post_Maintainence/Restoral/Restoral-bfd/bfd-session[$pre-session-interface==session-interface]/session-state;
		var $post-session-interface	= $Post_Maintainence/Restoral/Restoral-bfd/bfd-session[$pre-session-interface==session-interface]/session-interface;
			/*Check the state*/
			if($post-session-state	!=$pre-session-state)
			{
	expr jcs:output(" The state of BFD interface " _ $post-session-interface _ " changed from " _ $pre-session-state _ " to " _ $post-session-state	);
			}

		}
		else
		{
		
			expr jcs:output(" BFD interface " _ $pre-session-interface _ " with state " _ $pre-session-state _ " is not present Post-Maintainence");
		}
	}

	/*Go through each node of bfd-session element in $Post_Maintainence/Restoral/Restoral-bfd/bfd-session */
	for-each($Post_Maintainence/Restoral/Restoral-bfd/bfd-session)
	{
		var $post-session-state		= session-state;
		var $post-session-interface	= session-interface;
		/* check if the present bfd-session element is present in pre Maintainence node set*/
		if(not($Pre_Maintainence/Restoral/Restoral-bfd/bfd-session[$post-session-interface==session-interface]))
		{
	expr jcs:output(" BFD interface " _ $post-session-interface _ " with state " _ $post-session-state _ " is newly added post Post-Maintainence");
		}
	}
	

			
	
}


/*
Diff_LDP_Sessions function gives the differences between pre maintainence and post maintainence output of "show ldp sessions"
*/

<func:function name="automation:Diff_LDP_Sessions">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance LDP Sessions  : " _ count($Pre_Maintainence/Restoral/Restoral-ldp-session/ldp-session));
	expr jcs:output(" Post-Maintenance LDP Sessions : " _ count($Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session));

	
	/*Go through each node of ldp-session element in $Pre_Maintainence/Restoral/Restoral-ldp-session/ldp-session*/	
	for-each($Pre_Maintainence/Restoral/Restoral-ldp-session/ldp-session)
	{
		var $pre-ldp-neighbor-address	= ldp-neighbor-address;
		var $pre-ldp-session-state	= ldp-session-state;
		var $pre-ldp-connection-state	= ldp-connection-state;
		/* check if the present ldp-session element is present in post Maintainence node set*/
		if($Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session[$pre-ldp-neighbor-address==ldp-neighbor-address])
		{
var $post-ldp-neighbor-address	= $Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session[$pre-ldp-neighbor-address==ldp-neighbor-address]/ldp-neighbor-address;
var $post-ldp-session-state	= $Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session[$pre-ldp-neighbor-address==ldp-neighbor-address]/ldp-session-state;
var $post-ldp-connection-state	= $Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session[$pre-ldp-neighbor-address==ldp-neighbor-address]/ldp-connection-state;
			/*Check the connection state and session state*/
			if((($pre-ldp-session-state!=$post-ldp-session-state)||($pre-ldp-connection-state!=$post-ldp-connection-state)))
			{
expr jcs:output("\n Pre Maintainence LDP session with neighbor " _ $pre-ldp-neighbor-address _ " state " _ $pre-ldp-session-state _ " connection state " _ $pre-ldp-connection-state);
expr jcs:output(" Post Maintainence LDP session with neighbor " _ $post-ldp-neighbor-address _ " state " _ $post-ldp-session-state _ " connection state " _ $post-ldp-connection-state);

			}
	
		}
		else
		{
expr jcs:output(" LDP session with neighbor address " _ $pre-ldp-neighbor-address _ " with status " _ $pre-ldp-session-state _ " is not present post maintenance");
	
		}
	}
	/*Go through each node of ldp-session element in $Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session*/	
	for-each($Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session)
	{
		var $post-ldp-neighbor-address	= ldp-neighbor-address;
		var $post-ldp-session-state	= ldp-session-state;
		var $post-ldp-connection-state	= ldp-connection-state;
		/* check if the present ldp-session element is present in pre Maintainence node set*/
		if(not($Pre_Maintainence/Restoral/Restoral-ldp-session/ldp-session[$post-ldp-neighbor-address==ldp-neighbor-address]))
		{
			
expr jcs:output(" LDP session with neighbor address " _ $post-ldp-neighbor-address _ " with status " _ $post-ldp-session-state _ " is newly added post maintenance");		
		}


	}
}


/*
Diff_mpls_interfaces function gives the differences between pre maintainence and post maintainence output of "show mpls interfaces"
*/



<func:function name="automation:Diff_mpls_interfaces">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance mpls interfaces  : " _ count($Pre_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface));
	expr jcs:output(" Post-Maintenance mpls interfaces : " _ count($Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface));
	/*Go through each node of mpls-interface element in  $Pre_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface*/
	for-each($Pre_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface)
	{
		var $pre-interface-name		= interface-name;
		var $pre-mpls-interface-state	= mpls-interface-state;
		/* check if the present mpls-interface element is present in post Maintainence node set*/
		if($Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface[$pre-interface-name==interface-name])
		{
		var $post-interface-name = $Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface[$pre-interface-name==interface-name]/interface-name;
	var $post-mpls-interface-state	= $Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface[$pre-interface-name==interface-name]/mpls-interface-state;
			/*Check if the state changed*/
			if($post-mpls-interface-state != $pre-mpls-interface-state)
			{
	expr jcs:output(" Mpls interface " _ $pre-interface-name _ " state change from  " _ $pre-mpls-interface-state _ " to " _ $post-mpls-interface-state);
			}
		}
		else
		{
	expr jcs:output(" Mpls interface " _ $pre-interface-name _ " with state " _ $pre-mpls-interface-state _ " not present Post Maintainence");
		}
		
	}

	/*Go through each node of mpls-interface element in $Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface*/
	for-each($Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface)
	{
		var $post-interface-name		= interface-name;
		var $post-mpls-interface-state		= mpls-interface-state;
		/* check if the present mpls-interface element is present in pre Maintainence node set*/
		if(not($Pre_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface[$post-interface-name==interface-name]))	
		{
	expr jcs:output(" Mpls interface " _ $post-interface-name _ " with state " _ $post-mpls-interface-state _ " is newly added Post Maintainence");		
		}
	}

			
	
}



/*
Diff_int_desc function gives the differences between pre maintainence and post maintainence output of "show interface description"
*/


<func:function name="automation:Diff_int_desc">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	
	/*Go through each node of physical-interface element in $Pre_Maintainence/Restoral/Restoral-int-desc/physical-interface*/
	for-each($Pre_Maintainence/Restoral/Restoral-int-desc/physical-interface)
	{
		var $pre-name		= name;
		var $pre-admin-status	= admin-status;
		var $pre-oper-status	= oper-status;
		/* check if the present physical-interface element is present in post Maintainence node set*/
		if($Post_Maintainence/Restoral/Restoral-int-desc/physical-interface[$pre-name==name])
		{
			var $post-name		= $Post_Maintainence/Restoral/Restoral-int-desc/physical-interface[$pre-name==name]/name;
			var $post-admin-status	= $Post_Maintainence/Restoral/Restoral-int-desc/physical-interface[$pre-name==name]/admin-status;
			var $post-oper-status	= $Post_Maintainence/Restoral/Restoral-int-desc/physical-interface[$pre-name==name]/oper-status;
			/* Check if operational status and admin status changed */
			if(($post-oper-status!=$pre-oper-status)||( $post-admin-status!= $pre-admin-status))
			{
		expr jcs:output("\n Pre Maintainence interface " _ $pre-name _ " admin status " _ $pre-admin-status _ " oper status " _ $pre-oper-status);
		expr jcs:output(" Post Maintainence interface " _ $post-name _ " admin status " _ $post-admin-status _ " oper status " _ $post-oper-status);

			}
		}
		else
		{
	expr jcs:output(" Interface " _ $pre-name _ " admin status " _ $pre-admin-status _ " oper status " _ $pre-oper-status _ " is missing post Maintainence");
		}

		
	}
	/*Go through each node of physical-interface element in $Post_Maintainence/Restoral/Restoral-int-desc/physical-interface*/
	for-each($Post_Maintainence/Restoral/Restoral-int-desc/physical-interface)
	{
		var $post-name		= name;
		var $post-admin-status	= admin-status;
		var $post-oper-status	= oper-status;
		/* check if the present physical-interface element is present in pre Maintainence node set*/	
		if(not($Pre_Maintainence/Restoral/Restoral-int-desc/physical-interface[$post-name== name]))
		{
expr jcs:output(" Interface " _ $post-name _ " admin status " _ $post-admin-status _ " oper status " _ $post-oper-status _ " is newly added Maintainence");
		}
	}
			
	
}

/*
Diff_chassis_fpc function gives the differences between pre maintainence and post maintainence output of "show chassis fpc pic-status"
*/


<func:function name="automation:Diff_chassis_fpc">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	
	
	for-each($Pre_Maintainence/Restoral/Restoral-fpc-pic/fpc)
	{
		var $pre-slot	=slot;
		var $pre-state	=state;
		if($Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[($pre-slot==slot)])
		{
			
			var $post-slot	= $Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[($pre-slot==slot)]/slot;
			var $post-state	= $Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[($pre-slot==slot)]/state;
			if($post-state!=$pre-state)
			{
				expr jcs:output("The status of FPC with slot " _ $post-slot _ " changed from " _ $pre-state _ " to " _ $post-state); 
			}
		}
		else
		{
			expr jcs:output(" FPC " _ $pre-slot _ " with state " _ $pre-state _ " is missing post Maintainence");
		}
		for-each($Pre_Maintainence/Restoral/Restoral-fpc-pic/fpc[slot==$pre-slot]/pic)
		{
			var $pre-pic-slot	=pic-slot;
			var $pre-pic-state	=pic-state;
			if($Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[slot==$pre-slot]/pic[$pre-pic-slot==pic-slot])
			{
			var $post-pic-slot	=$Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[slot==$pre-slot]/pic[$pre-pic-slot==pic-slot]/pic-slot;
			var $post-pic-state	=$Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[slot==$pre-slot]/pic[$pre-pic-slot==pic-slot]/pic-state;
				if($pre-pic-state!=$post-pic-state)
				{
expr jcs:output("The status of FPC PIC with slot " _ $pre-slot _ " and PIC " _ $pre-pic-slot _ " changed from " _ $pre-pic-state _ " to " _ $post-pic-state); 
				}
			}
			else
			{
	expr jcs:output(" FPC " _ $pre-slot _ " with PIC " _ $pre-pic-slot _ " with state " _ $pre-pic-state _ " is missing post Maintainence");
			}
			
		}
	}
	
	
	for-each($Post_Maintainence/Restoral/Restoral-fpc-pic/fpc)
	{
		var $post-slot	=slot;
		var $post-state	=state;
		if(not($Pre_Maintainence/Restoral/Restoral-fpc-pic/fpc[$post-slot==slot]))
		{
		expr jcs:output(" FPC " _ $post-slot _ " with state " _ $post-state _ " is newly added post Maintainence");
		}
			for-each($Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[$post-slot==slot]/pic)
			{
				var $post-pic-slot	= pic-slot;
				var $post-pic-state	= pic-state;
				
				
				if(not($Pre_Maintainence/Restoral/Restoral-fpc-pic/fpc[$post-slot==slot]/pic[pic-slot==$post-pic-slot]))
				{
	expr jcs:output(" FPC " _ $post-slot _ " with PIC " _ $post-pic-slot _ " with state " _ $post-pic-state _ " is newly added post Maintainence");
				}
			}
			
		
		
			
	}
		

			
	
}

/*
Diff_Isis_Adjacency function gives the differences between pre maintainence and post maintainence output of "show isis Adjacency"
*/

<func:function name="automation:Diff_Isis_Adjacency">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance ISIS ADJ  : " _ count($Pre_Maintainence/Restoral/Restoral-Isis/isis-adjacency));
	expr jcs:output(" Post-Maintenance ISIS ADJ : " _ count($Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency));
	/*Go through each node of isis-adjacency element in $Pre_Maintainence/Restoral/Restoral-Isis/isis-adjacency*/

	for-each($Pre_Maintainence/Restoral/Restoral-Isis/isis-adjacency)
	{
		
		var $pre-interface-name		= interface-name;
		var $pre-adjacency-state	= adjacency-state;
		/* check if the present isis-adjacency element is present in post Maintainence node set*/	
		if($Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency[$pre-interface-name==interface-name])
		{
		var $post-interface-name		= $Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency[$pre-interface-name==interface-name]/interface-name;
		var $post-adjacency-state	= $Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency[$pre-interface-name==interface-name]/adjacency-state;
			/*Check the state if changed*/
			if($post-adjacency-state!=$pre-adjacency-state)
			{ 
		expr jcs:output(" The state of ISIS " _ $pre-interface-name _ " changed from " _ $pre-adjacency-state _ " to " _ $post-adjacency-state);
			}
		}
		else
		{
			expr jcs:output(" The ISIS " _ $pre-interface-name _ " with state " _ $pre-adjacency-state _ " is not present post Maintainence");
		}
		
	}
	/*Go through each node of isis-adjacency element in $Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency*/
	for-each($Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency)
	{
		var $post-interface-name		= interface-name;
		var $post-adjacency-state		= adjacency-state;
		/* check if the present isis-adjacency element is present in pre Maintainence node set*/	
		if(not($Pre_Maintainence/Restoral/Restoral-Isis/isis-adjacency[$post-interface-name== interface-name]))
		{
			expr jcs:output(" The ISIS " _ $post-interface-name _ " with state " _ $post-adjacency-state _ " is newly added post Maintainence");
		}	
	}		

}


/*
Diff_BGP_Summary function gives the differences between pre maintainence and post maintainence output of "show bgp summary"
*/



<func:function name="automation:Diff_BGP_Summary">
{
	param 	$Pre_Maintainence;
	param	$Post_Maintainence;
	
expr jcs:output("\n Pre-Maintenance Established BGP sessions  : " _ count($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer[(peer-state=="Established")||(peer-state=="ESTABLISHED")]));
expr jcs:output(" Post-Maintenance Established BGP sessions : " _ count($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[(peer-state=="Established")||(peer-state=="ESTABLISHED")]));
	/*Go through each node of bgp-peer element in $Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer*/
	
	for-each($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer)
	{
		var $pre-peer-as=./peer-as;
		var $pre-peer-state=./peer-state;
		var $pre-description=./description;
		/* check if the present bgp-peer element is present in post Maintainence node set*/
		if($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as])
		{
			var $post-peer-as	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/peer-as;
			var $post-peer-state	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/peer-state;
			var $post-description	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/description;
			
			/*Check if the state changed */
			if(($pre-peer-state!=$post-peer-state)||($pre-description!=$post-description))
			{
expr jcs:output("\n Mismatch Found");
expr jcs:output(" Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " Pre-Maintenance");
expr jcs:output(" Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " Post-Maintenance");
	
			}
		}
		else
		{
expr jcs:output("\n Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " is missing in Post-Maintenance BGP sessions");
		}
	}

	/*Go through each node of bgp-peer element  in $Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer*/
	for-each($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer)
	{
		var $post-peer-as=./peer-as;
		var $post-peer-state=./peer-state;
		var $post-description=./description;
		/* check if the present bgp-peer element is present in pre Maintainence node set*/
		if($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as])
		{
			var $pre-peer-as	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/peer-as;
			var $pre-peer-state	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/peer-state;
			var $pre-description	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/description;
			
			/*Check if the state changed */
			if(($pre-peer-state!=$post-peer-state)||($pre-description!=$post-description))
			{
expr jcs:output("\n Mismatch Found");
expr jcs:output(" Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " Pre-Maintenance");
expr jcs:output(" Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " Post-Maintenance");
	
			}
		}
		else
		{
expr jcs:output("\n Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " is newly added in Post-Maintenance BGP sessions");
		}
	}
}


/*
Diff_BGP_Summary function gives the differences between pre maintainence and post maintainence output of "show ldp neighbor"
*/


<func:function name="automation:Diff_LDP_Neighbor">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance LDP neighbors  : " _ count($Pre_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor));
	expr jcs:output(" Post-Maintenance LDP neighbors : " _ count($Post_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor));
	
	/*Go through each node of ldp-neighbor element in  $Pre_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor*/	
	for-each($Pre_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor)
	{
		var $pre-ldp-neighbor-address	= ldp-neighbor-address;
		/* check if the present ldp-neighbor element is present in post Maintainence node set*/
		if(not($Post_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor[$pre-ldp-neighbor-address==ldp-neighbor-address]))
		{
	expr jcs:output(" LDP neighbor " _ $pre-ldp-neighbor-address _ " is not present post Maintainence");
		}
	}

	/*Go through each node of ldp-neighbor element in $Post_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor*/	
	for-each($Post_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor)
	{
		var $post-ldp-neighbor-address	= ldp-neighbor-address;
		/* check if the present ldp-neighbor element is present in pre Maintainence node set*/
		if(not($Pre_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor[$post-ldp-neighbor-address==ldp-neighbor-address]))
		{
	expr jcs:output(" LDP neighbor " _ $post-ldp-neighbor-address _ " is newly added post Maintainence");
		}
	}
			
	
}



/*
<func:function name="automation:View_Pre_Maintenance_State">
{
	param $File;
	expr jcs:output($File);
}*/




<func:function name="automation:Show_KRT_Queue">
{

	/* Show_KRT_Queue initialises the KRT_Queue_checker function with the hard time out of 5 minutes.*/
	var $Return = automation:Show_KRT_Queue_Checker(4,0);
	

}

/*
		Show_KRT_Queue_Checker first invokes jcs:sleep(60).The script waits for 60 sec .After that checks whether $Count is zero.
		If $Count is zero it means hard time out occured ,a error prompt is given to user that Queue didnt converge in 
		5 minutes.If $Count is not zero then wait the script checks whether all the nodes of "show krt queue" output are 
		zero.If any one of them is not zero then Show_KRT_Queue_Checker function is called again with reduced $Count value and $Perfect as zero. 
		If all nodes of "show krt queue" output are zero it is checked whether $Perfect is 1.If it is "one" it means that 
		krt queue converged in the before executing Show_KRT_Queue_Checker function.So code returns to Traffic_Removal_Function template.
		Else if  $Perfect is not zero then Show_KRT_Queue_Checker function is called again with reduced $Count value and $Perfect as "one". 
		
	*/

<func:function name="automation:Show_KRT_Queue_Checker">
{
	param $Count;
	param $Perfect;
	var $show_krt_queue	= <command> "show krt queue";
	var $o_show_krt_queue	= jcs:invoke($show_krt_queue);
	expr jcs:output(" Waiting for 60 secs");
	expr jcs:sleep( 60 );	/* Wait for 60 seconds*/
	
	/* Check if hard time-out is expired */
	if($Count==0)
	{
		
		expr automation:Quit_Prompt_Function("\n Queue didnt get converge in 10 minutes .Something is wrong.!");
		
	}
	for-each($o_show_krt_queue/krt-queue)
	{
		/*Check if KRT Queue output is empty for each node*/
		if(./krtq-queue-length!=0)
		{ 	
			
			/*if krtq-queue-length not equal to zero then call Show_KRT_Queue_Checker with reduced $Count and $Perfect as "0"*/
			var $Return = automation:Show_KRT_Queue_Checker($Count - 1,0);
			<func:result select="$Return">;	
			
			
			
		}
	}
	expr jcs:output("\n KRT Queue is Empty ");
	/* If $Perfect is "1" then return to previous function called. ultimately return to template Traffic_Removal_Function */
	if($Perfect==1)
	{
			

			var $Return=$Perfect+1;
			<func:result select="$Return">;	
		
	}
	else
	{
			/*if $Perfect not equal to "1" then call Show_KRT_Queue_Checker function with reduced $Count and $Perfect as "1"*/
			var $Return = automation:Show_KRT_Queue_Checker($Count - 1,1);
			
			<func:result select="$Return">;
	}
	
	
}

/*
Quit_Prompt_Function will implement a prompt which gives three options to the user
 1) continue 	-----> 	to go to next step
 2) quit 	-----> 	to exit from the script
 3) show	-----> 	choosing show will call View_System_Running function by which the user can run the operational commands and check the operational status 
			of the router	
 if the user enters anything other than these three words Quit_Prompt_Function is called again
*/	


<func:function name="automation:Quit_Prompt_Function">
{
	param $Display;
	expr jcs:output($Display);
	expr jcs:output("\n Please Choose \"quit\"  [to Quit], \"continue\" [to continue], \"show\" [show command]");
	var $var = jcs:get-input( " Enter : " );
	if($var=="quit")     
	{ 
	  		<xsl:message terminate="yes"> "Aborting the script";
	} 
	else
	{
		if($var=="show")
		{
			expr automation:View_System_Running();
			expr automation:Quit_Prompt_Function($Display);
		}
		else
		{
			if($var!="continue")
			{
		
				<xsl:message> "Wrong Option . Please retry\n";
				expr automation:Quit_Prompt_Function($Display);
				
			
			}
		}
	}
	
}
/*
software_version Function is used to check the software version of the two routing engines.Give an error prompt if they are not equal
*/
<func:function name="automation:software_version">
{
	
	var $Show_Version	= <command> "show version";
	var $O_Show_Version	= jcs:invoke($Show_Version);	/* invoke "show version" on main routing engine*/
		
		/* Check if node with element name = "junos" exists. If it does then the comment at the path contains the Junos code versio*/
		if($O_Show_Version/package-information[name=="junos"]/comment)
		{
			/* Printing the Junos code version of the main routing engine*/
			expr jcs:output("\n The JUNOS version of the router is " _ $O_Show_Version/package-information[name=="junos"]/comment);
			var $Result_Master=$O_Show_Version/package-information[name=="junos"]/comment;
			
			/*Check the code version of other routing engine*/
			var $Show_Version_other	= <command> "show version invoke-on other-routing-engine";
			var $O_Show_Version_other	= jcs:invoke($Show_Version_other);
	
			if($O_Show_Version_other/multi-routing-engine-item/software-information/package-information[name=="junos"]/comment)
			{
				var $Result_Backup	=$O_Show_Version_other/multi-routing-engine-item/software-information/package-information[name=="junos"]/comment;
				expr jcs:output("\n The JUNOS version of the other-routing-engine is " _ $Result_Backup);

				/*Check if the JUNOS code version of main routing engine and other routing engine match. If they dont match give an error
					prompt saying version mismatch*/
				if($Result_Backup!=$Result_Master)
				{
					expr automation:Quit_Prompt_Function("\n The JUNOS version doesnt match on two routing engines. Please quit the script.");
				}
		
		
			}
			else
			{
				expr automation:Quit_Prompt_Function("\n The Junos version not present on other routing engine");
			}
		}
		else
		{
			expr automation:Quit_Prompt_Function("\n The Junos version not present ");
		}
	
	
}



/*
Check_if_File_Exits function checks if xml file of pre maintanence that is saved at "/var/home/full/.If file is present then the function returns to the main script.
If the file not script enables the user to give the file name by calling Restoral_File_Finder Function.
*/
<func:function name="automation:Check_if_File_Exits">
{
	var $File_Name	=	automation:File_Name_Creater() _ ".xml";

	if(automation:File_Finder($File_Name)=="no")
	{
		expr jcs:output("\n You don't have the restoral in local disk");
		expr jcs:output("\n You have to specify the file name in local disk ");
		var $Restoral_File	=automation:Restoral_File_Finder();
		<func:result select="$Restoral_File">;
	
	}
	else
	{
		expr jcs:output("\n You have the required file in the local disk");
		
		<func:result select="$File_Name">;
	}
}

/*

File_Finder function searches whether file with the name $File_name is present at "/var/home/full/" path.
It returns 	"yes" if file is present
		"no" if file not present

*/
<func:function name="automation:File_Finder">
{
	param $File_name;
	var $Code_path_file		= "/var/home/full/";
	expr jcs:output("\n Searching for code file if exists on router at " _ $Code_path_file);
	var $File_Search		=  <file-list>{			
						<path> $Code_path_file;
					}
	var $O_File_Search		= jcs:invoke($File_Search);
	

	if($O_File_Search/directory/file-information[file-name==$File_name])
	{
		var $Result="yes";
		expr jcs:output("\n File Present !");
		<func:result select="$Result">;
	}
	else
	{
		var $Result="no";
		expr jcs:output("\n File not Present !");
		<func:result select="$Result">;
	}
}

/*

File_Name_Creater function creates a string File_name in the format "[Router name][month][day][year]"
(File_name) ------->	The pre maintenance configuration of the router is saved with this name.
(File_name).xml---->	 This xml file is used to store pre maintenance state of the router.This xml file contains the output of following commands


*/

<func:function name="automation:File_Name_Creater">
{

	var $regex 		= "([[:digit:]]*)-([[:digit:]]*)-([[:digit:]]*) ([0-9]*):([0-9]*):([0-9]*).*";
	var $result 		= jcs:regex($regex, $localtime-iso );
	var $Router_Name 	= <command> "show version";
	var $O_Router_Name 	= jcs:invoke($Router_Name);
	var $Actual_Router_Name	= $O_Router_Name/host-name;
	var $File_name		= $Actual_Router_Name _ "." _ $result[3] _ $result[4] _ substring($result[2],3,4);
	<func:result select="$File_name">;
}

/*
Restoral_File_Finder Function asks user whether the file is present in local disk at "var/home/full"
If user enters "no" it gives an error prompt saying "trafffic can't be restoted without have the pre maintenence state xml file.
If file is present then the user has the enter the file name.The script checks whether the file name entered by user is present 
by calling File_Finder function. If file exists then Restoral_File_Finder returns to the main script.
If wrong file name is entered then Restoral_File_Finder function is called again

*/

<func:function name="automation:Restoral_File_Finder">
{
	var $Option	= jcs:get-input("\n Is the file present in local disk at var/home/full (yes/no) ");
	if($Option=="yes")
	{
		var $Restoral_xml_file		= jcs:get-input("\n Please enter the xml file name that is present in /var/home/full/ ");
		var $Result			= automation:File_Finder($Restoral_xml_file);
		if($Result=="yes")
		{
			<func:result select="$Restoral_xml_file">;
		}
		else
		{
			var $Retry_Restoral_xml_file		= automation:Restoral_File_Finder();
			<func:result select="$Retry_Restoral_xml_file">;
			
		}
	}
	else
	{
		if($Option=="no")
		{
			
			expr automation:Quit_Prompt_Function("\n Pre maintenace file is needed for Traffic Restoration");
		}
		else
		{
			expr jcs:output("\n Wrong option choosen .Please retry ");
			var $Restoral_xml_file		= automation:Restoral_File_Finder();
			<func:result select="$Restoral_xml_file">;	
		}
	}

}



/*Continue_Prompt_Function will implement a prompt which gives three options to the user
 1) yes 	-----> 	to go to next step
 2) quit 	-----> 	to exit from the script
 3) show	-----> 	choosing show will call View_System_Running function by which the user can run the operational commands and check the operational status 
			of the router
 if the user enters anything other than these three words Continue_Prompt_Function is called again	
*/


<func:function name="automation:Continue_Prompt_Function">
{
	param $Display;
	expr jcs:output($Display);
	expr jcs:output("\n Please Choose \"yes\" [to Continue],\"quit\" [to Exit],\"show\" [show command]");
	
	var $var = jcs:get-input(" Enter: ");
	if($var=="quit")     
	{ 
	  		<xsl:message terminate="yes"> "Aborting the script";
	} 
	else
	{
		if($var=="show")
		{
			expr automation:View_System_Running();
			expr automation:Continue_Prompt_Function($Display);
		}
		else
		{
			if($var!="yes")
			{
		
				<xsl:message> "Wrong Option . Please retry \n";
				expr automation:Continue_Prompt_Function($Display);
				
			
			}
		}
	}
	
}



/* Diff_route_summary function displays the number of routers for each table pre maintainence and post maintainence */
<func:function name="automation:Diff_route_summary">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	for-each($Pre_Maintainence/Restoral/Restoral-route-summary/route-table)
	{
		expr jcs:output("\n Pre-Maintainence Route Type:" _ table-name _ " Count :" _ total-route-count);
		var $pre-table-name=table-name;
		if($Post_Maintainence/Restoral/Restoral-route-summary/route-table[$pre-table-name==table-name])
		{
			var $post-table-name		=$Post_Maintainence/Restoral/Restoral-route-summary/route-table[$pre-table-name==table-name]/table-name;
			var $post-total-route-count	=$Post_Maintainence/Restoral/Restoral-route-summary/route-table[$pre-table-name==table-name]/total-route-count;
			expr jcs:output(" Post-Maintainence Route Type:" _ table-name _ " Count :" _ total-route-count);
		}
		else
		{
			expr jcs:output(" Post-Maintenance data of " _ $pre-table-name _ " is not availabe");
		}
	}
	
}

/*Diff_mpls_terse function displays the transit lsp count of pre maintainence and post maintainence */
<func:function name="automation:Diff_mpls_terse">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	
	for-each($Pre_Maintainence/Restoral/Restoral-mpls-terse/rsvp-session-data)
	{
		expr jcs:output("\n Pre-Maintenance " _ session-type _ " Total:" _ count _ " up-count:" _ up-count _ " down-count:" _ down-count);
		var $pre-session-type	=session-type;
		if($Post_Maintainence/Restoral/Restoral-mpls-terse/rsvp-session-data[$pre-session-type==session-type])
		{
			var $post-session-type	=$Post_Maintainence/Restoral/Restoral-mpls-terse/rsvp-session-data[$pre-session-type==session-type]/session-type;
			var $post-count		=$Post_Maintainence/Restoral/Restoral-mpls-terse/rsvp-session-data[$pre-session-type==session-type]/count;
			var $post-up-count	=$Post_Maintainence/Restoral/Restoral-mpls-terse/rsvp-session-data[$pre-session-type==session-type]/up-count;
			var $post-down-count	=$Post_Maintainence/Restoral/Restoral-mpls-terse/rsvp-session-data[$pre-session-type==session-type]/down-count;
expr jcs:output(" Post-Maintenance " _ $post-session-type _ " Total:" _ $post-count _ " up-count:" _ $post-up-count _ " down-count:" _ $post-down-count);
		}
		else
		{
			expr jcs:output(" Post-Maintenance data of " _ session-type _ " is not availabe");
		}
	}
		
}

/*Diff_chassis_alarms function displays the count of alarms pre maintainence and post maintainence and also list the new alarms added and alarms missing post maintainence*/
<func:function name="automation:Diff_chassis_alarms">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	
		expr jcs:output("\n Pre-Maintenance chassis alarms   : " _ count($Pre_Maintainence/Restoral/Restoral-Chassis-alarms/alarm-detail));
		expr jcs:output("\n Post-Maintenance chassis alarms  : " _ count($Post_Maintainence/Restoral/Restoral-Chassis-alarms/alarm-detail));
	
	
	
	for-each($Post_Maintainence/Restoral/Restoral-Chassis-alarms/alarm-detail)
	{
		var $post-alarm-description=alarm-description;
		if(not($Pre_Maintainence/Restoral/Restoral-Chassis-alarms/alarm-detail[$post-alarm-description==alarm-description]))
		{
			expr jcs:output(" New alarm present Post-Maintainence " _ $post-alarm-description);
		}
	}

	for-each($Pre_Maintainence/Restoral/Restoral-Chassis-alarms/alarm-detail)
	{
		var $pre-alarm-description=alarm-description;
		if(not($Post_Maintainence/Restoral/Restoral-Chassis-alarms/alarm-detail[$pre-alarm-description==alarm-description]))
		{
			expr jcs:output(" Alarm not present Post-Maintainence " _ $pre-alarm-description);
		}
	}
	
	
	
}


/*
View_System_Running allows the user to check the operational status of the router by making user run operational commands on the router from script
*/


<func:function name="automation:View_System_Running">
{
	
		var $Command = jcs:get-input("\n Please enter the command ");		/* Get the command from the user*/
		var $Show_Command = <command> $Command;
		var $O_Show_Command =  jcs:invoke($Show_Command);			/*invoke the user entered command*/
		expr jcs:output($O_Show_Command);					/* show the output*/
		
		
}

