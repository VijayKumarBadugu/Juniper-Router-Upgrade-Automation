/*
$Id$
*/

version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns adv = "http://xml.juniper.net/adventure";
ns func extension = "http://exslt.org/functions";
ns test = "http://xml.juniper.net/test";
ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";



match / {


	var $connection = jcs:open();
/********************************************** show software of the system ***************************************************************/
	
	expr test:software_version();
	expr test:Continue_Prompt_Function();

/********************************************** search for xml restoral file ***************************************************************/
	var $File_name		= "/var/home/full/" _ test:Check_if_File_Exits();

	
	
	var $Restoral_xml_file		= $File_name ;
	var $O_Bgp_Config		= document($Restoral_xml_file);
	

	

	expr jcs:output("===========> activate routing-instances");
	expr test:Continue_Prompt_Function();
	
/********************************************** activate routing-instances ****************************************************************/

	
	if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/routing-instances)
	{
		var $routing_instance_activate =	{
					<configuration>{
            					<routing-instances active="active">;
						}
						}
	call jcs:load-configuration( $connection, $configuration =$routing_instance_activate);
		
	}


	expr jcs:output("===========> activate routing-options");
	expr test:Continue_Prompt_Function();

/********************************************** activate routing-options *********************************************************************/
	
	var $routing_options_activate =	{
					<configuration>{
            					<routing-options active="active">;
						}
						}
	call jcs:load-configuration( $connection, $configuration =$routing_options_activate);


	
	

	expr jcs:output("===========> activate chassis redundancy");
	expr test:Continue_Prompt_Function();

/********************************************** activate chassis redundancy ***********************************************************************/

	var $chassis_redundancy_activate =	 	{
						<configuration>{
							<chassis>	{
                				<redundancy active="active">;
									}
								}
							}
	call jcs:load-configuration( $connection, $configuration =$chassis_redundancy_activate);
	
	expr jcs:output("===========> activate protocols");
	expr test:Continue_Prompt_Function();

/********************************************** activate protocols ***********************************************************************/
	
	var $protocols_activate_configuration={
				<configuration> {
					<protocols active="active">;
		    				}
					  }

	call jcs:load-configuration( $connection, $configuration =$protocols_activate_configuration);
	
	expr jcs:output("===========> activate bgp");
	expr test:Continue_Prompt_Function();

/********************************************** activate bgp *****************************************************************************/

	var $bgp_activate_configuration={
				<configuration> {
					<protocols >{
							<bgp active="active">;
							}
		    				}
					  }
	

		
	call jcs:load-configuration( $connection, $configuration =$bgp_activate_configuration);
	
	expr test:Show_KRT_Queue();

	expr jcs:output("===========> delete protocols isis overload");
	expr test:Continue_Prompt_Function();

/********************************************** delete protocols isis overload ***********************************************************/
 
	if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/protocols/isis/timeout)
	{		
		var $isis_delete_configuration={
			<configuration> {
				<protocols> {
					<isis delete="delete"> {
						<overload delete="delete">;
						}
					    }
					}
		   	 }
		call jcs:load-configuration( $connection, $configuration =$isis_delete_configuration);

		expr jcs:output("===========> set protocols isis overload timeout 600");
		expr test:Continue_Prompt_Function();

/********************************************** set protocols isis overload timeout 600  *************************************************/

		var $isis_time_reset_configuration={
			<configuration> {
				<protocols> {
					<isis> {
						<overload>{
								<timeout> 600;
							}
						}
					    }
					}
		    	}

		call jcs:load-configuration( $connection, $configuration =$isis_time_reset_configuration);
	}


	expr jcs:output("===========> activate group <GROUP_NAME>");
	expr test:Continue_Prompt_Function();

/********************************************** activate group <GROUP_NAME>  *************************************************/

	var $Restore_Bgp_Config=<get-configuration>;
	var $O_Restore_Bgp_Config 	= jcs:invoke($Restore_Bgp_Config);
	

for-each($O_Restore_Bgp_Config/protocols/bgp/group[(type=="external")&&(not(starts-with(peer-as,"64")||starts-with(peer-as,"65")||starts-with(peer-as,"61")||starts-with(peer-as,"62")))])
	{
		
		var $Temp_bgp_grp = name;
			
		if($O_Bgp_Config/Restoral/Restoral-Conf/configuration/protocols/bgp/group[(not(@inactive))&&(name==$Temp_bgp_grp)])
		{	
			/*if(not($O_Bgp_Config/configuration/protocols/bgp/group[(@inactive)]))
			{*/
				expr jcs:output("\n Now activating bgp group " _ name _ " with peer-as " _ peer-as);
					var $bgp_group_activate_configuration={
						<configuration> {
							<protocols>{
								<bgp>	{
								<group active="active">
											{
							 				<name> name;
											}
									}
				 		   		    }
		    						}
					  		}
			call jcs:load-configuration( $connection, $configuration = $bgp_group_activate_configuration);
			/*}*/
	
		}




	}


	var $Pre_Maintainence=document($Restoral_xml_file);
	var $Post_Maintainence=test:Tree-construct();
	expr test:Diff_chassis_fpc($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_Isis_Adjacency($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_BGP_Summary($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_LDP_Neighbor($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_LDP_Sessions($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_BFD_Session($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_int_desc($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_mpls_interfaces($Pre_Maintainence,$Post_Maintainence);
	expr test:Diff_rsvp_interfaces($Pre_Maintainence,$Post_Maintainence);


	
	
	var $close-results = jcs:close($connection);






}


<func:function name="test:Tree-construct">
{
	var $xml_config			= <get-configuration format="xml">;
	var $o_xml_config		= jcs:invoke($xml_config);
	var $fpc-pic-status		= <command> "show chassis fpc pic-status";
	var $o_fpc-pic-status		= jcs:invoke($fpc-pic-status);
	var $get-isis-adjacency 	= <command> "show isis adjacency";
	var $o-get-isis-adjacency 	= jcs:invoke($get-isis-adjacency);
	var $get-bgp			= <command> "show bgp summary";
	var $o_get-bgp			= jcs:invoke($get-bgp);

	var $ldp_neighbor		= <command> "show ldp neighbor";
	var $o_ldp_neighbor		= jcs:invoke($ldp_neighbor);

	var $ldp_session		= <command> "show ldp session";
	var $o_ldp_session		= jcs:invoke($ldp_session);

	var $show_bfd			= <command> "show bfd session";
	var $o_show_bfd			= jcs:invoke($show_bfd);

	var $show_route			= <command> "show route summary";
	var $o_show_route		= jcs:invoke($show_route);
	var $show_chassis		= <command> "show chassis summary";
	var $o_show_chassis		= jcs:invoke($show_chassis);
	
	var $show_interface_des		= <command> "show interface descriptions";
	var $o_show_interface_des	= jcs:invoke($show_interface_des);

	var $show_mpls_lsp_terse	= <command> "show mpls lsp terse";
	var $o_show_mpls_lsp_terse	= jcs:invoke($show_mpls_lsp_terse);

	var $show_mpls_int		= <command> "show mpls interface";
	var $o_show_mpls_int		= jcs:invoke($show_mpls_int);

	var $show_rsvp_int		= <command> "show rsvp interface";
	var $o_show_rsvp_int		= jcs:invoke($show_rsvp_int);


var $content := {
			<Restoral> {
				<Restoral-Conf>{
					copy-of $o_xml_config;
					
					}
				
				<Restoral-rsvp-interface>	{
									for-each($o_show_rsvp_int/rsvp-interface)
									{
										<rsvp-interface>
											{
            											<interface-name>interface-name;
            											<index>index;
            											<rsvp-status>rsvp-status;
										}
									}
								}

				<Restoral-mpls-interface>	{
									for-each($o_show_mpls_int/mpls-interface)
									{
										<mpls-interface>{
            										<interface-name>interface-name;
            										<mpls-interface-state>mpls-interface-state;
												}
									}
								}
				<Restoral-int-desc>	{
								for-each($o_show_interface_des/physical-interface)
								{
									<physical-interface>{
            									<name>name;
            									<admin-status>admin-status;            											<oper-status>oper-status;
            									<description>description;
											}
								}
									
							}

				<Restoral-bfd>	{
							for-each($o_show_bfd/bfd-session)
							{
							<bfd-session>{
            							<session-neighbor>session-neighbor;
            							<session-state>session-state;
            							<session-interface>session-interface;
            							<session-detection-time>session-detection-time;
            							<session-transmission-interval>session-transmission-interval;
            							<session-adaptive-multiplier>session-adaptive-multiplier;
					
								}
							}
						}
				
				<Restoral-ldp-session>	{
								for-each($o_ldp_session/ldp-session)
								{
									<ldp-session>{
            									<ldp-neighbor-address>ldp-neighbor-address;
            									<ldp-session-state>ldp-session-state;
            									<ldp-connection-state>ldp-connection-state;
            									<ldp-remaining-time>ldp-remaining-time;
            									<ldp-session-adv-mode>ldp-session-adv-mode;
							
										}
								}
									
							}

				<Restoral-ldp-neighbor>	{
								for-each($o_ldp_neighbor/ldp-neighbor)
								{
									 <ldp-neighbor>{
            									<ldp-neighbor-address>ldp-neighbor-address;
            									<interface-name>interface-name;
            									<ldp-label-space-id>ldp-label-space-id;
            									<ldp-remaining-time>ldp-remaining-time;
											}
								}
									
							}

				<Restoral-Bgp>	{
								for-each($o_get-bgp/bgp-peer)
								{
									<bgp-peer>{
											<peer-as>peer-as;
											<peer-state>peer-state;
											<description>description;
										}
								}
									
									
								
						}
				<Restoral-Isis>	{
							for-each($o-get-isis-adjacency/isis-adjacency)
							{
							<isis-adjacency>{
            							<interface-name>interface-name;
           							<system-name>system-name;
            							<level>level;
            							<adjacency-state>adjacency-state;
            							<holdtime>holdtime;
									}
							}
						}
				
				

				<Restoral-fpc-pic>	{
								 	for-each($o_fpc-pic-status/fpc)
									{
										<fpc>{
											var $slot=slot;
											<slot>slot;
            										<state>state;
            										<description>description;
												for-each($o_fpc-pic-status/fpc[$slot==slot]/pic)
												{
													<pic>{
                											<pic-slot>pic-slot;
                											<pic-state>pic-state;
                											<pic-type>pic-type;
														}

												}
										     }
									}
								}
						}
			}

	<func:result select="$content">;
			
}


<func:function name="test:Diff_rsvp_interfaces">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance rsvp interfaces  : " _ count($Pre_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface));
	expr jcs:output("\n Post-Maintenance rsvp interfaces : " _ count($Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface));
	
	for-each($Post_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface[rsvp-status!="Up"])
	{
		var $post-interface-name=interface-name;
		expr jcs:output( $post-interface-name);
		if($Pre_Maintainence/Restoral/Restoral-rsvp-interface/rsvp-interface[(rsvp-status=="Up")&&(interface-name==$post-interface-name)])
		{
				expr jcs:output("\n Interface " _ interface-name _ " is not in \"Up\" state Post maintenance");
		}
	}

			
	
}


<func:function name="test:Diff_BFD_Session">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance BFD Sessions  : " _ count($Pre_Maintainence/Restoral/Restoral-bfd/bfd-session));
	expr jcs:output("\n Post-Maintenance BFD Sessions : " _ count($Post_Maintainence/Restoral/Restoral-bfd/bfd-session));

			
	
}

<func:function name="test:Diff_LDP_Sessions">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance LDP Sessions  : " _ count($Pre_Maintainence/Restoral/Restoral-ldp-session/ldp-session));
	expr jcs:output("\n Post-Maintenance LDP Sessions : " _ count($Post_Maintainence/Restoral/Restoral-ldp-session/ldp-session));

			
	
}


<func:function name="test:Diff_mpls_interfaces">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance mpls interfaces  : " _ count($Pre_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface));
	expr jcs:output("\n Post-Maintenance mpls interfaces : " _ count($Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface));
	
	for-each($Post_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface[mpls-interface-state!="Up"])
	{
		var $post-interface-name=interface-name;
		expr jcs:output( $post-interface-name);
		if($Pre_Maintainence/Restoral/Restoral-mpls-interface/mpls-interface[(mpls-interface-state=="Up")&&(interface-name==$post-interface-name)])
		{
				expr jcs:output("\n Interface " _ interface-name _ " is not in \"Up\" state Post maintenance");
		}
	}

			
	
}

<func:function name="test:Diff_int_desc">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	
	
	for-each($Post_Maintainence/Restoral/Restoral-int-desc/physical-interface[(admin-status!="up")||(oper-status!="up") ])
	{
		var $post-interface-name	=name;
		var $admin-status		=admin-status;
		var $oper-status		=oper-status;	
		
	if($Pre_Maintainence/Restoral/Restoral-int-desc/physical-interface[((admin-status!=$admin-status)||(oper-status!=$oper-status))&&($post-interface-name==name)])
		{
				expr jcs:output("\n Interface " _ name _ " is not in \"Up\" state Post maintenance");
		}
	}

			
	
}

<func:function name="test:Diff_chassis_fpc">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	
	
	for-each($Post_Maintainence/Restoral/Restoral-fpc-pic/fpc)
	{
		var $post-slot	=slot;
		var $state	=state;
		if($Pre_Maintainence/Restoral/Restoral-fpc-pic/fpc[($post-slot==slot)&&(state!=$state)])
		{
			expr jcs:output("The status of FPC with slot " _ $post-slot _ " changed"); 
		}
		for-each($Post_Maintainence/Restoral/Restoral-fpc-pic/fpc[slot==$post-slot]/pic[pic-state!="Online"])
		{
			var $post-pic-slot	=pic-slot;
			var $post-pic-state	=pic-state;
			if($Pre_Maintainence/Restoral/Restoral-fpc-pic/fpc[slot==$post-slot]/pic[(pic-slot==$post-pic-slot)&&($post-pic-state!=pic-state)])
			{
				expr jcs:output("The status of FPC PIC with slot " _ $post-slot _ " and PIC " _ $post-pic-slot _ " changed"); 
			}
			
		}
	}

			
	
}


<func:function name="test:Diff_Isis_Adjacency">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance ISIS ADJ  : " _ count($Pre_Maintainence/Restoral/Restoral-Isis/isis-adjacency));
	expr jcs:output("\n Post-Maintenance ISIS ADJ : " _ count($Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency));

	for-each($Post_Maintainence/Restoral/Restoral-Isis/isis-adjacency[adjacency-state!="Up"])
	{
		var $post-interface-name =interface-name;
		if($Pre_Maintainence/Restoral/Restoral-Isis/isis-adjacency[(interface-name==$post-interface-name)&&(adjacency-state=="Up")])
		{
			expr jcs:output("\n Interface " _ interface-name _ " is not in \"Up\" state Post maintenance");
			
		}
	}		
	
}


<func:function name="test:Diff_BGP_Summary">
{
	param 	$Pre_Maintainence;
	param	$Post_Maintainence;
	
	expr jcs:output("\n Pre-Maintenance BGP sessions  : " _ count($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer[peer-state=="Established"]));
	expr jcs:output("\n Post-Maintenance BGP sessions : " _ count($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[peer-state=="Established"]));
	
	for-each($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer)
	{
		var $pre-peer-as=./peer-as;
		var $pre-peer-state=./peer-state;
		var $pre-description=./description;
		
		if($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as])
		{
			var $post-peer-as	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/peer-as;
			var $post-peer-state	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/peer-state;
			var $post-description	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$pre-peer-as==peer-as]/description;
			
			
			if(($pre-peer-state!=$post-peer-state)||($pre-description!=$post-description))
			{
expr jcs:output("\n Mismatch Found");
expr jcs:output("\n Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " Pre-Maintenance");
expr jcs:output("\n Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " Post-Maintenance");
	
			}
		}
		else
		{
expr jcs:output("\n Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " is missing in Post-Maintenance BGP sessions");
		}
	}

	for-each($Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer)
	{
		var $post-peer-as=./peer-as;
		var $post-peer-state=./peer-state;
		var $post-description=./description;
		
		if($Pre_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as])
		{
			var $pre-peer-as	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/peer-as;
			var $pre-peer-state	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/peer-state;
			var $pre-description	=$Post_Maintainence/Restoral/Restoral-Bgp/bgp-peer[$post-peer-as==peer-as]/description;
			
			
			if(($pre-peer-state!=$post-peer-state)||($pre-description!=$post-description))
			{
expr jcs:output("\n Mismatch Found");
expr jcs:output("\n Peer-as " _ $pre-peer-as _ " with state " _ $pre-peer-state _ " and description " _ $pre-description _ " Pre-Maintenance");
expr jcs:output("\n Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " Post-Maintenance");
	
			}
		}
		else
		{
expr jcs:output("\n Peer-as " _ $post-peer-as _ " with state " _ $post-peer-state _ " and description " _ $post-description _ " is newly added in Post-Maintenance BGP sessions");
		}
	}
}

<func:function name="test:Diff_LDP_Neighbor">
{
	param $Pre_Maintainence;
	param $Post_Maintainence;
	expr jcs:output("\n Pre-Maintenance LDP neighbors  : " _ count($Pre_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor));
	expr jcs:output("\n Post-Maintenance LDP neighbors : " _ count($Post_Maintainence/Restoral/Restoral-ldp-neighbor/ldp-neighbor));

			
	
}




<func:function name="test:View_Pre_Maintenance_State">
{
	param $File;
	expr jcs:output($File);
}




<func:function name="test:Show_KRT_Queue">
{

	
	var $Return = test:Show_KRT_Queue_Checker(4,0);
	

}

<func:function name="test:Show_KRT_Queue_Checker">
{
	param $Count;
	param $Perfect;
	var $show_krt_queue	= <command> "show krt queue";
	var $o_show_krt_queue	= jcs:invoke($show_krt_queue);
	expr jcs:output(" Waiting for 10 secs");
	expr jcs:sleep( 10 );
	
	
	if($Count==0)
	{
		expr jcs:output("Queue didnt get converge in 10 minutes .Something is wrong.!");
		expr test:Quit_Prompt_Function();
		
	}
	for-each($o_show_krt_queue/krt-queue)
	{
		
		if(./krtq-queue-length!=0)
		{ 	
			
			
			var $Return = test:Show_KRT_Queue_Checker($Count - 1,0);
			<func:result select="$Return">;	
			
			
			
		}
	}
	expr jcs:output(" Queue is Empty");
	if($Perfect==1)
	{
			

			var $Return=$Perfect+1;
			<func:result select="$Return">;	
		
	}
	else
	{
			var $Return = test:Show_KRT_Queue_Checker($Count - 1,1);
			
			<func:result select="$Return">;
	}
	
	
}


<func:function name="test:Quit_Prompt_Function">
{
	expr jcs:output("\n Please Choose \"yes\"  [to Quit], \"continue\" [to continue], \"show\" [show command]");
	var $var = jcs:get-input( " Enter : " );
	if($var=="yes")     
	{ 
	  		<xsl:message terminate="yes"> "Aborting the script";
	} 
	else
	{
		if($var=="show")
		{
			expr test:View_System_Running();
			expr test:Quit_Prompt_Function();
		}
		else
		{
			if($var!="continue")
			{
		
				<xsl:message> "Wrong Option . Please retry\n";
				expr test:Quit_Prompt_Function();
				
			
			}
		}
	}
	
}

<func:function name="test:software_version">
{
	var $Show_Version	= <command> "show version";
	var $O_Show_Version	= jcs:invoke($Show_Version);
	expr jcs:output("\n The version of the router is " _ $O_Show_Version/junos-version);
	
}


<func:function name="test:Check_if_File_Exits">
{
	var $File_Name	=	test:File_Name_Creater() _ ".xml";

	if(test:File_Finder($File_Name)=="no")
	{
		expr jcs:output("\n You don't have the restoral in local disk");
		expr jcs:output("\n You need to download the xml file from FTP server");
		var $Restoral_File	=test:Restoral_File_Finder();
		<func:result select="$Restoral_File">;
	
	}
	else
	{
		expr jcs:output("\n You have the required file in the local disk");
		
		<func:result select="$File_Name">;
	}
}

<func:function name="test:File_Finder">
{
	param $File_name;
	var $Code_path_file		= "/var/home/full/";
	expr jcs:output("\n Searching for code file if exists on router at " _ $Code_path_file);
	var $File_Search		=  <file-list>{			
						<path> $Code_path_file;
					}
	var $O_File_Search		= jcs:invoke($File_Search);
	

	if($O_File_Search/directory/file-information[file-name==$File_name])
	{
		var $Result="yes";
		<func:result select="$Result">;
	}
	else
	{
		var $Result="no";
		<func:result select="$Result">;
	}
}



<func:function name="test:File_Name_Creater">
{

	var $regex 		= "([[:digit:]]*)-([[:digit:]]*)-([[:digit:]]*) ([0-9]*):([0-9]*):([0-9]*).*";
	var $result 		= jcs:regex($regex, $localtime-iso );
	var $Router_Name 	= <command> "show version";
	var $O_Router_Name 	= jcs:invoke($Router_Name);
	var $Actual_Router_Name	= $O_Router_Name/host-name;
	var $File_name		= $Actual_Router_Name _ "." _ $result[3] _ $result[4] _ substring($result[2],3,4);
	<func:result select="$File_name">;
}



<func:function name="test:Restoral_File_Finder">
{
	var $Option	= jcs:get-input("\n Is the file present in local disk ? ");
	if($Option=="yes")
	{
		var $Restoral_xml_file		= jcs:get-input("\n Please enter the xml file name with path of the xml configuration file "); 
		<func:result select="$Restoral_xml_file">;
	}
	else
	{
		if($Option=="no")
		{
			var $Restoral_xml_file		= test:XML_Path_Finder();
			<func:result select="$Restoral_xml_file">;
		}
		else
		{
			var $Restoral_xml_file		= test:Restoral_File_Finder();
			<func:result select="$Restoral_xml_file">;	
		}
	}

}


<func:function name="test:XML_Path_Finder">
{
	
		var $Source_File		=jcs:get-input("\n Please enter the xml file name ");/*"jinstall64-13.3R3-S8.2-domestic-signed.tgz";*/
		expr jcs:output("\n Downloading the xml file " _ $Source_File);
		var $Destination_File	="/var/home/full/" _ $Source_File;	
		var $Success_Destination_File = test:FTP_File_Transfer_Software($Source_File,$Destination_File);	
		<func:result select="$Success_Destination_File">;
	

}

<func:function name="test:Continue_Prompt_Function">
{
	expr jcs:output("\n Please Choose \"yes\" [to Continue],\"quit\" [to Exit],\"show\" [show command]");
	
	var $var = jcs:get-input(" Enter: ");
	if($var=="quit")     
	{ 
	  		<xsl:message terminate="yes"> "Aborting the script";
	} 
	else
	{
		if($var=="show")
		{
			expr test:View_System_Running();
			expr test:Continue_Prompt_Function();
		}
		else
		{
			if($var!="yes")
			{
		
				<xsl:message> "Please choose between 'yes' or 'no'.\n";
				expr test:Continue_Prompt_Function();
				
			
			}
		}
	}
	
}



<func:function name="test:FTP_File_Transfer_Software">
{
	param $Source_File;
	param $Destination_File;
	var $FTP_IP 		= jcs:get-input("\n Please enter the IP address of the FTP server " );
	var $FTP_Hostname	= jcs:get-input("\n Please enter user name of the FTP server " );
	var $Password		= jcs:get-secret("\n Please enter the password ");
	
	var $FTP_Config_path	= test:FTP_Config_Path_Finder();
	
	var $Temp		="ftp://" _ $FTP_Hostname _ ":" _ $Password _ "@" _ $FTP_IP _ $FTP_Config_path _  $Source_File;

	var $file-copy-xml-rpc = <file-copy> {
     			 	<source> $Temp;
      				<destination> $Destination_File;
						
    						}
	expr jcs:output("\n Source file :" _ $Temp);
	expr jcs:output("\n Destination file : " _ $Destination_File);
	var $results-xml = jcs:invoke($file-copy-xml-rpc);
	if ($results-xml//self::xnm:error)
	{
		expr jcs:output($results-xml);
		expr jcs:output("\n File transer failed ! Please try again ");
		var $Success_Destination_File = test:XML_Path_Finder();
		<func:result select="$Success_Destination_File">;
	}
	else
	{
		expr jcs:output("\n File transfered successfully ! ");
		<func:result select="$Destination_File">;
	}
	
}




<func:function name="test:FTP_Config_Path_Finder">
{
	var $FTP_Config_option	= jcs:get-input("\n Is the file at /prod/img directory at TFTP server ");
	if($FTP_Config_option=="yes")
	{
		var $FTP_Config_path= "/prod/img/";
		<func:result select="$FTP_Config_path">;
	}
	else
	{
		if($FTP_Config_option=="no")
		{
			var $FTP_Config_path=jcs:get-input("\n please give the path from root ");
			<func:result select="$FTP_Config_path">;
		}
		else
		{
			var $FTP_Config_path	= test:FTP_Config_Path_Finder();
			<func:result select="$FTP_Config_path">;
		}
	}
}



<func:function name="test:View_System_Running">
{
	
		var $Command = jcs:get-input("\n Please enter the command ");
		var $Show_Command = <command> $Command;
		var $O_Show_Command =  jcs:invoke($Show_Command);
		expr jcs:output($O_Show_Command);
		
		
}

